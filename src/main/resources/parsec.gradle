//See gradle.properties for project properties
buildscript{

    //Load project properties (a bit ugly here)
    def props = new Properties()
    props.load(new URL(buildscript.getSourceURI().toURL(), "./gradle.properties").openStream())
    props.each { key, val ->
        if(!project.hasProperty(key)){
            project.ext.set(key, val)
        }
    }

    //Add in dependencies for parsec-gradle-plugin
    repositories {
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'gradle.plugin.com.yahoo.parsec', name: 'gradle-plugin'          , version: parsecGradleVersion
        classpath group: 'org.kt3k.gradle.plugin'        , name: 'coveralls-gradle-plugin', version: coverallsVersion
    }
}

group = 'com.yahoo.parsec.base_build'
version = project.version


//Parsec Plugins
apply plugin: com.yahoo.parsec.gradle.ParsecGradlePlugin

//Language Plugins
apply plugin: 'java'

//Integration Plugins
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'osgi'
apply plugin: 'application'
apply plugin: 'war'

//Code Enhancement Plugins
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: org.kt3k.gradle.plugin.CoverallsPlugin


//Profile: No-Code-Check
if(project.hasProperty('profile') && project.getProperties().get('profile') == 'no-code-check'){
    check.enabled = false
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {

    mavenCentral()
    jcenter()

}

dependencies {
    //NOT AVAILABLE YET
    //compile group: 'com.yahoo.parsec'            , name: 'parsec_clients'             , version:'1.0.34'
    //compile group: 'com.yahoo.parsec'            , name: 'parsec_config'              , version:'1.0.0'
    //compile group: 'com.yahoo.parsec'            , name: 'parsec_validation'          , version:'2.0.0'
    //compile group: 'com.yahoo.parsec'            , name: 'parsec_logging'             , version:'1.0.2'

    compile group: 'com.google.inject'              , name: 'guice'                      , version: guiceVersion
    compile group: 'org.glassfish.jersey.core'      , name: 'jersey-common'              , version: jerseyVersion
    compile group: 'org.glassfish.jersey.core'      , name: 'jersey-server'              , version: jerseyVersion
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet'   , version: jerseyVersion
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: jerseyVersion
    compile group: 'org.glassfish.jersey.media'     , name: 'jersey-media-moxy'          , version: jerseyVersion
    compile group: 'org.eclipse.jetty'              , name: 'jetty-servlet'              , version: jettyVersion
    compile group: 'javax.servlet'                  , name: 'javax.servlet-api'          , version: servletVersion
    compile group: 'org.slf4j'                      , name: 'slf4j-api'                  , version: slf4jVersion

    testCompile group: 'commons-logging'      , name: 'commons-logging'  , version: commonsLoggingVersion
    testCompile group: 'commons-lang'         , name: 'commons-lang'     , version: commonsLangVersion
    testCompile group: 'org.spockframework'   , name: 'spock-core'       , version: spockVersion
    testCompile(group: 'cglib'                , name: 'cglib'            , version: cglibVersion) {
        exclude(module: 'asm-util')
        exclude(module: 'asm')
    }
    testCompile group: 'org.ow2.asm'          , name: 'asm-all'          , version: asmAllVersion
    testCompile group: 'org.objenesis'        , name: 'objenesis'        , version: objenesisVersion
    testCompile(group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-jetty', version: jerseyVersion) {
        exclude(module: 'javax.servlet-api')
    }
}

findbugs{
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    reportsDir = file("$project.buildDir/findbugsReports")
    excludeFilter = file("$project.projectDir/config/findbugs/excludeFilter.xml")
}

pmd {
    //default config
}

checkstyle {
    ignoreFailures = true
}

import org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext

jettyRun {
    scanIntervalSeconds = 1
    contextPath = parsecWebappRootPath
    webAppConfig = new JettyPluginWebAppContext()
    webAppConfig.resourceBase = ['src/main/webapp', 'build/generated-resources/parsec']

}

war {
    from 'build/generated-resources/parsec'
    webInf {
        from(project.getBuildDir()){
            include ".*/classes/.*"
        }
    }

}

tasks.withType(Checkstyle) {
    exclude '**/parsec_generated/**/*'
    exclude '**/generated/**/*'
    //exclude '**/clover/**'
}

tasks.withType(Pmd){
    exclude '**/parsec_generated/**/*'
    exclude '**/generated/**/*'
    //exclude '**/clover/**'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

parsec {
    swaggerRootPath = parsecWebappRootPath
    generateHandlerImpl = true
    useSmartMethodNames = false
    handleUncaughtExceptions = parsecHandleUncaughtExceptions
    generateParsecError = parsecGenerateParsecError
}
